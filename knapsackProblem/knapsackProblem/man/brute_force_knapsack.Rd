% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brute_force_knapsack.R
\name{brute_force_knapsack}
\alias{brute_force_knapsack}
\title{Brute Force Solution for Kanpsack Problem}
\usage{
brute_force_knapsack(x, W, parallel = FALSE)
}
\arguments{
\item{x}{is a dataframe constising}

\item{W}{is capacity of kanpsack}

\item{parallel}{default is false, if it it TRUE than parallel operation will be performed. Only set to True when Data set is large}
}
\value{
\code{list} List of object containing \code{value} giving maximum value of Knapsack out of dataframe and \code{elements} giving postion of 
selected values from dataframe x
}
\description{
Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.
The only solution that is guaranteed to give a correct answer in all situations for the knapsack problem is using brute-force search, i.e. going through all possible alternatives and return the maximum value found.
This approach is of complexity BigOh 2n since all possible combinations 2n needs to be evaluated.
}
\examples{
\dontrun{
brute_force_knapsack(data.frame("w" = c(10,20,30,40) , "v" = c(2,4,3,5)), 3500)
brute_force_knapsack(data.frame("w" = c(10,20,30,40) , "v" = c(2,4,3,5)), 3500,parallel = TRUE) 
}
}
\references{
\url{https://en.wikipedia.org/wiki/Knapsack_problem}
}
