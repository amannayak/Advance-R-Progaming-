% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dynamic_knapsack.R
\name{dynamic_knapsack}
\alias{dynamic_knapsack}
\title{Dynamic programming Solution for Kanpsack Problem}
\usage{
dynamic_knapsack(x, W)
}
\arguments{
\item{x}{is a dataframe constising}

\item{W}{is capacity of kanpsack}
}
\value{
\code{list} List of object containing \code{value} giving maximum value of Knapsack out of dataframe and \code{elements} giving postion of 
selected values from dataframe x
}
\description{
If the weights are actually discrete values we can use this to create an algorithm that can solve the knapsack problem exact by iterating
over all possible values of w.
This function should return the same results as the brute force algorithm, but unlike the brute force it should scale much better since the algorithm will run in O<Wn>.
}
\examples{
\dontrun{
greedy_knapsack(data.frame("w" = c(10,20,30,40) , "v" = c(2,4,3,5)), 3500)
 }
}
\references{
\url{https://en.wikipedia.org/wiki/Knapsack_problem#0.2F1_knapsack_problem}
}
